# Build a Neighbour-joining phylogeny

# 1. Generate beagle files with ANGSD
# 1.1. this generates a beagle file for each chromosome

Angsd.sh

#!/bin/bash -l
#SBATCH -A project_ID
#SBATCH -p node -n 1
#SBATCH -J Tree_Angsd
#SBATCH -t 6-00:00:00

module load bioinfo-tools
module load ANGSD/0.917

date

REF='GCA_019903745.2_ULRtarCaribou_2v2_genomic.fa'
OUTPUT_DIR="63genomes"

# List of chromosomes
CHROMOSOMES=("CM056401.1" "CM056402.1" "CM056403.1" "CM056404.1" "CM056405.1" "CM056406.1" "CM056407.1" "CM056408.1" "CM056409.1" "CM056410.1" "CM056411.1" "CM056412.1" "CM056413.1" "CM056414.1" "CM056415.1" "CM056416.1" "CM056417.1" "CM056418.1" "CM056419.1" "CM056420.1" "CM056421.1" "CM056422.1" "CM056423.1" "CM056424.1" "CM056425.1" "CM056426.1" "CM056427.1" "CM056428.1" "CM056429.1" "CM056430.1" "CM056431.1" "CM056432.1" "CM056433.1" "CM056434.1")

# Run ANGSD for each chromosome
for CHR in "${CHROMOSOMES[@]}"; do
	OUTPUT_PREFIX="${OUTPUT_DIR}/output_${CHR}"
    angsd -r "${CHR}" -bam bam_list_63_genomes -out reindeer_adaptation_data_63genomes -GL 2 -doGlf 2 -doPlink 2 -doMajorMinor 1 -SNP_pval 1e-6 -doGeno -1 -doPost 1 -minMapQ 30 -minQ 20 -minMaf 0.05
 -doCounts 1 -doMaf 3 -geno_minDepth 5 -setMinDepthInd 5 -postCutoff 0.95 -minInd 10 -remove_bads 1 -uniqueOnly 1 -nThreads 12
done

# 1.2 combine all beagle files
zcat *.beagle.gz | head -n1 > reindeer_adaptation_data_63genomes.beagle.gz

# 2. build tree
pcangsd --beagle reindeer_adaptation_data_63genomes.beagle.gz --o reindeer_adaptation_63genomes.pcaAngsd --threads 40 --iter 1000 --inbreedSamples --tree


# 3. generate bootstraps in R
# 3.1 Bootstrap script for NJ tree: bootstrap_nj_tree.R

args = commandArgs(trailingOnly=TRUE)
InputBeagle  <- args[1]
OutputBeagle <- args[2]

beagle <- read.table(gzfile(InputBeagle,'rt'))
header <- beagle[1,]
beagle <- beagle[2:nrow(beagle),]
numberOfMarkers <- nrow(beagle)

bs <- sample(1:numberOfMarkers, numberOfMarkers, replace=T)
bsBeagle <- beagle[bs,]

out <- rbind(header, bsBeagle)
write.table(out, OutputBeagle, quote = F, row.names = F, col.names = F, sep = "\t")


# 3.2 run bootstraps

mkdir bootstraps
cd bootstraps

for i in {1..100}
do
  # Create unique suffix for each iteration
  suffix="boot_$i"

  # Run the R script to generate the input files for pcangsd
  Rscript ../bootstrap_nj_tree.R ../reindeer_adaptation_data_63genomes.beagle.gz reindeer_adaptation_data_63genomes_${suffix}.beagle

  #gzip 

  gzip reindeer_adaptation_data_63genomes_${suffix}.beagle

  # Run pcangsd to generate the tree with inbreeding, PCA, and iteration options
  pcangsd --beagle reindeer_adaptation_data_63genomes_${suffix}.beagle.gz \
          --o reindeer_adaptation_63genomes_${suffix}.pcaAngsd \
          --threads 40 \
          --iter 1000 \
          --inbreedSamples \
          --tree
done

# 4. #combine all bootstrap trees

cat reindeer_adaptation_63genomes_boot_*.pcaAngsd.tree > reindeer_adaptation_63genomes_boot_combined.pcaAngsd.tree

#then in R:
----------

library(ape)
setwd("~/Neighbor_joining_bootstraps")

filename <- "reindeer_adaptation_63genomes_boot.pcaAngsd.tree"

# this is a list of parsimony starting 10 trees generated by RAxML 
tree <- read.tree(filename)
bootstraps_file <- "reindeer_adaptation_63genomes_boot_combined.pcaAngsd.tree"
bstrees <- read.tree(bootstraps_file)
boot <- prop.clades(tree, bstrees)/length(bstrees)
tree$node.label <- boot
write.tree(tree, file = "tree_with_bootstrap.nwk")


# 5. make the tree in figtree











